#include <iostream>
#include <queue>

using namespace std;

const int maxn = 100;

struct Node {
    int x, y;
}node;

int X[] = { 0, 0, 1, -1 };
int Y[] = { 1, -1, 0, 0 };

int n, m, ans;
int matrix[maxn][maxn];
bool inq[maxn][maxn] = { false };

bool judge(int x, int y) {
    if (x < 0 || y < 0 || x >= n || y >= m) return false;
    if (matrix[x][y] == 0 || inq[x][y] == true) return false;
    return true;
}

void BFS(int x, int y) {
    queue<Node> Q;
    node.x = x;
    node.y = y;
    Q.push(node);
    inq[x][y] = true;

    while(!Q.empty()) {
        Node top = Q.front();
        Q.pop();
        for (int i = 0; i < 4; i++) {
            int NewX = top.x + X[i];
            int NewY = top.y + Y[i];
            if (judge(NewX, NewY)) {
                node.x = NewX;
                node.y = NewY;
                Q.push(node);
                inq[NewX][NewY] = true;
            }
        }
    }
}
int main() {
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> matrix[i][j];
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] == 1 && inq[i][j] == false) {
                BFS(i, j);
                ans++;
            }
        }
    }
    cout << ans << endl;
    return 0;
}